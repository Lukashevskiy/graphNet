# filemanager.py
import os
import sys
from pathlib import Path
import dearpygui.dearpygui as dpg
from typing import List, Tuple, Callable
from datetime import datetime


class FileManager:
    """–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, 
                 callback: Callable[[Path, str], None], 
                 title: str = "–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä",
                 width: int = 900,
                 height: int = 600):
        self.callback = callback
        self.title = title
        self.width = width
        self.height = height
        self.window_tag = "file_manager_window"
        self.current_path = Path.cwd()
        self.selected_items = []  # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.last_selected_index = -1  # –î–ª—è Shift-–≤—ã–±–æ—Ä–∞
        self.file_items = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        
    def show(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"""
        with dpg.window(
            label=self.title,
            width=self.width,
            height=self.height,
            tag=self.window_tag,
            on_close=self._on_close
        ):
            self._create_gui()
            # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
            dpg.set_frame_callback(dpg.get_frame_count() + 1, lambda: self._load_sidebar())
    
    def _create_gui(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
        dpg.add_text("–ü—É—Ç—å: ", tag="breadcrumbs_text")
        
        # –ê–¥—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        dpg.add_input_text(
            tag="address_input",
            width=-1,
            on_enter=True,
            callback=self._on_address_enter
        )
        
        dpg.add_separator()
        
        # –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (—Å–ª–µ–≤–∞) –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        with dpg.group(horizontal=True):
            # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            with dpg.child_window(width=250, height=-150, tag="sidebar_container"):
                dpg.add_text("–ù–∞–≤–∏–≥–∞—Ü–∏—è:")
                dpg.add_button(label="üè† –î–æ–º–æ–π", tag="home_btn")
                dpg.add_button(label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", tag="refresh_btn")
                
                dpg.add_separator()
                dpg.add_text("–î–µ—Ä–µ–≤–æ –ø–∞–ø–æ–∫:")
                
                # –ì—Ä—É–ø–ø–∞ –¥–ª—è –¥–µ—Ä–µ–≤–∞ (–±—É–¥–µ–º –æ—á–∏—â–∞—Ç—å –µ—ë)
                with dpg.group(tag="tree_group"):
                    pass  # –ü—É—Å—Ç–∞—è –≥—Ä—É–ø–ø–∞, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            with dpg.child_window(height=-150, tag="main_content"):
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
                with dpg.group(horizontal=True):
                    dpg.add_text("–ò–º—è")
                    dpg.add_text("–¢–∏–ø")
                    dpg.add_text("–†–∞–∑–º–µ—Ä")
                    dpg.add_text("–î–∞—Ç–∞")
                
                dpg.add_separator()
                
                # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                with dpg.group(tag="files_list"):
                    dpg.add_text("–ó–∞–≥—Ä—É–∑–∫–∞...")
        
        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä
        dpg.add_text("–ì–æ—Ç–æ–≤", tag="status_text")
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        dpg.add_separator()
        dpg.add_text("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
        dpg.add_input_text(
            tag="selected_items_text",
            width=-1,
            height=30,
            multiline=True,
            readonly=True
        )
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞
        dpg.add_button(
            label="–í—ã–±—Ä–∞—Ç—å", 
            tag="select_btn",
            width=120,
            height=30
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback'–∏
        dpg.set_item_callback("home_btn", self._go_home)
        dpg.set_item_callback("refresh_btn", self._refresh_sidebar)
        dpg.set_item_callback("select_btn", self._select_and_close)
    
    def _load_sidebar(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        try:
            # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–µ—Ä–µ–≤–∞
            dpg.delete_item("tree_group", children_only=True)
            
            if sys.platform == "win32":
                # –î–ª—è Windows –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Å–∫–∏
                import string
                drives = [f"{d}:\\\\" for d in string.ascii_uppercase if os.path.exists(f"{d}:\\\\")]
                for drive in drives:
                    drive_path = Path(drive)
                    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ–≥–∞
                    drive_letter = drive.replace(":\\\\", "").replace(":", "")
                    node_tag = f"node_{drive_letter}"
                    
                    # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ –≥—Ä—É–ø–ø–µ
                    dpg.add_tree_node(
                        label=f"üíæ {drive}",
                        parent="tree_group",
                        tag=node_tag,
                        callback=lambda p=drive_path: self._on_tree_node_click(p)
                    )
            else:
                # –î–ª—è Linux/macOS –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                # –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                dpg.add_tree_node(
                    label="üìÅ /",
                    parent="tree_group",
                    tag="node_root",
                    callback=lambda: self._on_tree_node_click(Path("/"))
                )
                # –î–æ–º–∞—à–Ω—è—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                dpg.add_tree_node(
                    label="üè† /home",
                    parent="tree_group",
                    tag="node_home",
                    callback=lambda: self._on_tree_node_click(Path.home())
                )
                    
        except Exception as e:
            self._show_simple_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {str(e)}")
    
    def _on_tree_node_click(self, path: Path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–∑–ª—É –¥–µ—Ä–µ–≤–∞"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        self._clear_selection()
        self._load_directory(path)
    
    def _update_breadcrumbs(self, path: Path):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏"""
        try:
            parts = list(path.parts)
            if sys.platform == "win32" and len(parts) > 0:
                breadcrumb_text = f"–ü—É—Ç—å: {parts[0]}"
                for part in parts[1:]:
                    breadcrumb_text += f" > {part}"
            else:
                breadcrumb_text = "–ü—É—Ç—å: " + " / ".join(parts)
            
            dpg.set_value("breadcrumbs_text", breadcrumb_text)
            dpg.set_value("address_input", str(path))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫: {e}")
    
    def _load_directory(self, path: Path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            if not path.exists():
                self._show_simple_error("–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
                
            if not path.is_dir():
                self._show_simple_error("–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
                return
            
            self.current_path = path
            self._update_breadcrumbs(path)
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏
            self.file_items = []
            dpg.delete_item("files_list", children_only=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            dirs, files = self._safe_listdir(path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if path.parent != path:  # –ù–µ –∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                with dpg.group(horizontal=True, parent="files_list"):
                    dpg.add_button(
                        label="..",
                        width=300,
                        callback=lambda: self._load_directory(path.parent)
                    )
                    dpg.add_text("–ü–∞–ø–∫–∞")
                    dpg.add_text("")
                    dpg.add_text("")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏
            for i, d in enumerate(dirs):
                self._add_file_item(d, is_dir=True, index=i)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            for i, f in enumerate(files):
                self._add_file_item(f, is_dir=False, index=len(dirs) + i)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            total_items = len(dirs) + len(files)
            dpg.set_value("status_text", f"–û–±—ä–µ–∫—Ç–æ–≤: {total_items}")
            
        except PermissionError:
            self._show_simple_error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        except Exception as e:
            self._show_simple_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}")
    
    def _safe_listdir(self, path: Path) -> Tuple[List[Path], List[Path]]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏"""
        try:
            items = list(path.iterdir())
            dirs = [p for p in items if p.is_dir()]
            files = [p for p in items if p.is_file()]
            dirs.sort(key=lambda x: x.name.lower())
            files.sort(key=lambda x: x.name.lower())
            return dirs, files
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {path}: {e}")
            return [], []
    
    def _add_file_item(self, item_path: Path, is_dir: bool, index: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        try:
            stat = item_path.stat()
            size = self._format_size(stat.st_size) if not is_dir else ""
            mtime = self._format_date(stat.st_mtime)
        except:
            size = "N/A"
            mtime = "N/A"
        
        item_type = "–ü–∞–ø–∫–∞" if is_dir else "–§–∞–π–ª"
        
        with dpg.group(horizontal=True, parent="files_list"):
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–∫—Ä—ã—Ç–∏—è
            btn = dpg.add_button(
                label=item_path.name,
                width=300,
                callback=lambda: self._on_item_click(item_path, is_dir, index)
            )
            dpg.add_text(item_type)
            dpg.add_text(size)
            dpg.add_text(mtime)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞
            dpg.set_item_user_data(btn, {
                "path": item_path, 
                "is_dir": is_dir, 
                "button": btn,
                "index": index
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            if not is_dir:  # –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
                self.file_items.append({
                    "path": item_path,
                    "is_dir": is_dir,
                    "button": btn,
                    "index": index
                })
    
    def _on_item_click(self, path: Path, is_dir: bool, index: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É"""
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–ª–∞–≤–∏—à
        key_shift = dpg.is_key_down(dpg.mvKey_Shift)
        key_ctrl = dpg.is_key_down(dpg.mvKey_Control)
        
        if is_dir:
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É
            self._clear_selection()
            self._load_directory(path)
        else:
            # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ - –≤—ã–±–æ—Ä
            if key_ctrl:
                # Ctrl + –∫–ª–∏–∫ - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä
                self._toggle_selection(path, index)
            elif key_shift and self.last_selected_index >= 0:
                # Shift + –∫–ª–∏–∫ - –≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                self._select_range(self.last_selected_index, index)
            else:
                # –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–∫ - –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç
                self._select_single(path, index)
    
    def _toggle_selection(self, path: Path, index: int):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if path in [item["path"] for item in self.selected_items]:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            self.selected_items = [item for item in self.selected_items if item["path"] != path]
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
            self.selected_items.append({"path": path, "index": index})
        
        self.last_selected_index = index
        self._update_selection_display()
        self._update_button_styles()
    
    def _select_single(self, path: Path, index: int):
        """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç"""
        self.selected_items = [{"path": path, "index": index}]
        self.last_selected_index = index
        self._update_selection_display()
        self._update_button_styles()
    
    def _select_range(self, start_index: int, end_index: int):
        """–í—ã–±–∏—Ä–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        min_index = min(start_index, end_index)
        max_index = max(start_index, end_index)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        self.selected_items = []
        
        for i in range(min_index, max_index + 1):
            if i < len(self.file_items):
                item = self.file_items[i]
                if not item["is_dir"]:  # –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã
                    self.selected_items.append({"path": item["path"], "index": i})
        
        self.last_selected_index = end_index
        self._update_selection_display()
        self._update_button_styles()
    
    def _clear_selection(self):
        """–û—á–∏—â–∞–µ—Ç –≤—ã–±–æ—Ä"""
        self.selected_items = []
        self.last_selected_index = -1
        self._update_selection_display()
        self._update_button_styles()
    
    def _update_selection_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if self.selected_items:
            names = [item["path"].name for item in self.selected_items]
            display_text = "\n".join(names)
            dpg.set_value("selected_items_text", display_text)
        else:
            dpg.set_value("selected_items_text", "")
    
    def _update_button_styles(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º"""
        selected_paths = [item["path"] for item in self.selected_items]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏
        for item in self.file_items:
            if not item["is_dir"]:  # –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã
                if item["path"] in selected_paths:
                    # –í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
                    dpg.configure_item(item["button"], color=(255, 255, 0))  # –ñ–µ–ª—Ç—ã–π —Ç–µ–∫—Å—Ç
                else:
                    # –ù–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å
                    dpg.configure_item(item["button"], color=(255, 255, 255))  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    
    def _on_address_enter(self, sender, app_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
        path_str = dpg.get_value("address_input")
        try:
            path = Path(path_str).resolve()
            if path.exists() and path.is_dir():
                self._clear_selection()
                self._load_directory(path)
            else:
                self._show_simple_error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
        except Exception as e:
            self._show_simple_error(f"–û—à–∏–±–∫–∞ –ø—É—Ç–∏: {str(e)}")
    
    def _go_home(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        self._clear_selection()
        self._load_directory(Path.home())
    
    def _refresh_sidebar(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        self._load_sidebar()
    
    def _refresh(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        self._load_directory(self.current_path)
    
    def _select_and_close(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä"""
        if self.callback:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö
            if self.selected_items:
                # –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                first_item = self.selected_items[0]["path"]
                item_type = "file" if first_item.is_file() else "folder"
                self.callback(first_item, item_type)
            else:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                self.callback(self.current_path, "folder")
        self._close()
    
    def _show_simple_error(self, message: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ"""
        dpg.set_value("status_text", f"–û—à–∏–±–∫–∞: {message}")
        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        def reset_status():
            dpg.set_value("status_text", "–ì–æ—Ç–æ–≤")
        dpg.set_frame_callback(dpg.get_frame_count() + 180, reset_status)  # ~3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 60 FPS
    
    def _format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
        if size_bytes == 0:
            return "0 B"
        size_names = ["B", "KB", "MB", "GB"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024.0
            i += 1
        return f"{size_bytes:.1f} {size_names[i]}"
    
    def _format_date(self, timestamp: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É"""
        try:
            dt = datetime.fromtimestamp(timestamp)
            return dt.strftime("%d.%m.%Y %H:%M")
        except:
            return "N/A"
    
    def _on_close(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self._close()
    
    def _close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ"""
        try:
            dpg.delete_item(self.window_tag)
        except:
            pass


def show_file_manager(callback: Callable[[Path, str], None], 
                     title: str = "–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä",
                     width: int = 900,
                     height: int = 600):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    
    Args:
        callback: —Ñ—É–Ω–∫—Ü–∏—è callback(selected_path: Path, item_type: str)
        title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        width: —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
        height: –≤—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞
    """
    manager = FileManager(callback, title, width, height)
    manager.show()