# ui/components/navigation_panel.py
import dearpygui.dearpygui as dpg
import sys
from typing import Dict, Set
from pathlib import Path
from typing import Callable, Optional
from ...models.file_tree import FileTree, FileTreeNode
from ...services.file_tree_service import FileTreeService
from ...services.file_system_service import FileSystemService
from ...models.file_item import FileItem

class NavigationPanel:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å —Ñ–∞–π–ª–æ–≤—ã–º –¥–µ—Ä–µ–≤–æ–º"""
    
    def __init__(self, 
                 on_navigate_callback: Callable[[Path], None],
                 on_directory_select_callback: Callable[[Path], None]):
        self.on_navigate_callback = on_navigate_callback
        self.on_directory_select_callback = on_directory_select_callback
        self.container_tag = "navigation_panel"
        self.tree_group_tag = "nav_tree_group"
        self.tree_nodes_map: Dict[int, str] = {}
        self.current_tree: Optional[FileTree] = None
        self.file_tree_service = FileTreeService()

    def create(self, parent: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        with dpg.child_window(width=250, height=-150, parent=parent, tag=self.container_tag, resizable_x=True):
            dpg.add_text("–ù–∞–≤–∏–≥–∞—Ü–∏—è:")
            dpg.add_button(label="üè† –î–æ–º–æ–π", tag="nav_home_btn")
            dpg.add_button(label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", tag="nav_refresh_btn")
            
            dpg.add_separator()
            dpg.add_text("–î–µ—Ä–µ–≤–æ –ø–∞–ø–æ–∫:")
            
            with dpg.group(tag=self.tree_group_tag):
                dpg.add_text("–ó–∞–≥—Ä—É–∑–∫–∞...")
        
        dpg.set_item_callback("nav_home_btn", lambda: self.on_navigate_callback(Path.home()))
        dpg.set_item_callback("nav_refresh_btn", self._on_refresh)
        
        return self.container_tag
    
    def _on_refresh(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.current_tree:
            self.load_navigation_tree(self.current_tree)
    
    def load_navigation_tree(self, navigation_tree: FileTree) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        try:
            self.current_tree = navigation_tree
            dpg.delete_item(self.tree_group_tag, children_only=True)
            self.tree_nodes_map.clear()
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —É–∑–ª—ã
            for root_node in navigation_tree.root_nodes:
                self._create_tree_node(root_node, self.tree_group_tag)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            dpg.add_text(f"–û—à–∏–±–∫–∞: {e}", parent=self.tree_group_tag)
    
    def _create_tree_node(self, file_tree_node: FileTreeNode, parent_tag: str, is_leaf: bool = False) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞ DPG –¥–ª—è FileTreeNode"""
        node_tag = f"tree_node_{file_tree_node.id}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫—É —É–∑–ª–∞
        if sys.platform == "win32" and len(file_tree_node.file_item.path.parts) == 1:
            label = f"üíæ {file_tree_node.file_item.path.parts[0]}"
        elif file_tree_node.file_item.path.name:
            label = f"üìÅ {file_tree_node.file_item.name}"
        else:
            label = f"üìÅ {file_tree_node.file_item.path}"
        # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞ –≤ DPG
        dpg_tree_node = dpg.add_tree_node(
            label=label,
            parent=parent_tag,
            tag=node_tag,
            leaf=is_leaf
        )
        
        self.tree_nodes_map[file_tree_node.id] = node_tag
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._add_node_handlers(node_tag, file_tree_node)
        
        # –î–æ–±–∞–≤–ª—è–µ–º placeholder –¥–ª—è lazy loading
        placeholder_tag = f"placeholder_{file_tree_node.id}"
        dpg.add_text("...", parent=node_tag, tag=placeholder_tag)
        
        return node_tag
    
    # ui/components/navigation_panel.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç)
    def _add_node_handlers(self, node_tag: str, file_tree_node: FileTreeNode) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É–∑–ª—É (–¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
        def on_node_clicked(sender):
            node = dpg.get_item_user_data(sender)
            if node and node.is_directory():
                self.on_directory_select_callback(node.get_path())
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —É–∑–ª–∞ (–∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞!)
        def on_node_toggled(sender, app_data):
            print(sender)
            
            node = dpg.get_item_user_data(sender)
            if node is None:
                raise ValueError("Node empty")
            
            if node and node.is_directory():
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                was_expanded = self.file_tree_service.toggle_node_expansion(self.current_tree, node)
                
                if was_expanded:
                    # –£–∑–µ–ª –±—ã–ª —Ä–∞—Å–∫—Ä—ã—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    self._update_node_children(node)
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        with dpg.item_handler_registry() as node_handler:
            dpg.add_item_clicked_handler(parent=node_handler, callback=on_node_clicked)
            dpg.add_item_toggled_open_handler(parent=node_handler, callback=on_node_toggled, user_data=file_tree_node)
            dpg.bind_item_handler_registry(node_tag, node_handler)

    def _update_node_children(self, file_tree_node: FileTreeNode) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–∑–ª–∞"""
        if self.current_tree is None:
            return
            
        try:
            node_tag = self.tree_nodes_map.get(file_tree_node.id)
            if not node_tag or not dpg.does_item_exist(node_tag):
                return
            
            # –£–¥–∞–ª—è–µ–º placeholder –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            placeholder_tag = f"placeholder_{file_tree_node.id}"
            if dpg.does_item_exist(placeholder_tag):
                dpg.delete_item(placeholder_tag)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —É–∑–ª—ã –¥–ª—è –¥–µ—Ç–µ–π
            for child in file_tree_node.children:
                child_node_tag = self.tree_nodes_map.get(child.id)
                if not child_node_tag:
                    self._create_tree_node(child, node_tag)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–µ–π —É–∑–ª–∞: {e}")

    def _load_children_on_expand(self, file_tree_node: FileTreeNode) -> None:
        """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ —É–∑–ª–∞"""
        if self.current_tree is None:
            return
            
        try:
            node_tag = self.tree_nodes_map.get(file_tree_node.id)
            if not node_tag or not dpg.does_item_exist(node_tag):
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —É–∂–µ –¥–µ—Ç–∏
            if file_tree_node.is_loaded:
                # –î–µ—Ç–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º —É–∑–ª—ã
                self._create_children_nodes(file_tree_node, node_tag)
                return
            
            # –£–¥–∞–ª—è–µ–º placeholder
            placeholder_tag = f"placeholder_{file_tree_node.id}"
            if dpg.does_item_exist(placeholder_tag):
                dpg.delete_item(placeholder_tag)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            try:
                directories, files = FileSystemService.list_directory(file_tree_node.file_item.path)
                
                # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –ø–∞–ø–æ–∫
                for dir_item in directories:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª
                    child_node = FileTreeNode(
                        id=self.current_tree.generate_id(),
                        file_item=dir_item,
                        children=[],
                        parent=file_tree_node
                    )
                    file_tree_node.add_child(child_node)
                    self.current_tree.node_map[dir_item.path] = child_node
                    
                    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —É–∑–µ–ª
                    self._create_tree_node(child_node, node_tag)
                
                # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –ø–∞–ø–æ–∫
                for file_item in files:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª
                    child_node = FileTreeNode(
                        id=self.current_tree.generate_id(),
                        file_item=file_item,
                        children=[],
                        parent=file_tree_node
                    )
                    file_tree_node.add_child(child_node)
                    self.current_tree.node_map[dir_item.path] = child_node
                    
                    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —É–∑–µ–ª
                    self._create_tree_node(child_node, node_tag, is_leaf=True)
                
                
                # –ü–æ–º–µ—á–∞–µ–º —É–∑–µ–ª –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π
                file_tree_node.is_loaded = True
                
            except PermissionError:
                dpg.add_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", parent=node_tag)
            except Exception as e:
                dpg.add_text(f"–û—à–∏–±–∫–∞: {str(e)}", parent=node_tag)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–µ–π: {e}")
    
    def _create_children_nodes(self, file_tree_node: FileTreeNode, parent_tag: str) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —É–∑–ª—ã –¥–ª—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π"""
        try:
            # –£–¥–∞–ª—è–µ–º placeholder –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            placeholder_tag = f"placeholder_{file_tree_node.id}"
            if dpg.does_item_exist(placeholder_tag):
                dpg.delete_item(placeholder_tag)
            
            # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –¥–µ—Ç–µ–π
            for child in file_tree_node.children:
                self._create_tree_node(child, parent_tag)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–∑–ª–æ–≤ –¥–µ—Ç–µ–π: {e}")
    
    def expand_to_path(self, path: Path) -> None:
        """–†–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏"""
        if self.current_tree is None:
            return
            
        try:
            # –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –∫ —Ü–µ–ª–∏
            path_parts = []
            current_path = path.resolve()
            
            while current_path != current_path.parent:
                path_parts.append(current_path)
                current_path = current_path.parent
            path_parts.append(current_path)
            path_parts.reverse()
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—É—Ç–∏ —Å–æ–∑–¥–∞–µ–º —É–∑–ª—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–µ–π
            current_parent_tag = self.tree_group_tag
            
            for i, path_part in enumerate(path_parts):
                # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —É–∑–µ–ª –¥–ª—è —ç—Ç–æ–≥–æ –ø—É—Ç–∏
                node = self.current_tree.find_node_by_path(path_part)
                if node is None:
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π FileItem –¥–ª—è —ç—Ç–æ–≥–æ –ø—É—Ç–∏
                    temp_file_item = FileItem.from_path(path_part)
                    node = FileTreeNode(
                        id=self.current_tree.generate_id(),
                        file_item=temp_file_item,
                        children=[],
                        parent=None
                    )
                    self.current_tree.node_map[path_part] = node
                    if i == 0:
                        self.current_tree.root_nodes.append(node)
                
                # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —É–∑–µ–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                node_tag = self.tree_nodes_map.get(node.id)
                if not node_tag:
                    node_tag = self._create_tree_node(node, current_parent_tag)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –¥–µ—Ç–µ–π
                if i < len(path_parts) - 1:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if not node.is_loaded:
                        self._load_children_on_expand(node)
                
                current_parent_tag = node_tag
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–æ –ø—É—Ç–∏ {path}: {e}")